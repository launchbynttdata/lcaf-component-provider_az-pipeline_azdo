# This template will validate the branch name meets our requirements for automated versioning.
# The following variables must be present in the current scope for this job to run:
#  poolName: The name of the ADO Agent pool to run the job on.
#  serviceConnection: The name of the Service Connection to utilize
#  buildSourceBranch: The branch of the triggering repo the build was queued for.
#  pullRequestTargetBranch: The name of the target branch for a pull request.

parameters:
  - name: poolName
    type: string
  - name: serviceConnection
    type: string
  - name: buildSourceBranch
    type: string
  - name: pullRequestSourceBranch
    type: string
  - name: pullRequestTargetBranch
    type: string

stages:
  - stage: BranchNameValidation
    displayName: Branch Name Validation
    jobs:
      - template: /common/jobs/generic-job.yaml
        parameters:
          jobName: PlatformValidation
          jobDisplayName: Platform Validation
          poolName: ${{ parameters.poolName }}
          steps:
            - template: /common/steps/has_semver_tag.yaml
              parameters:
                serviceConnection: ${{ parameters.serviceConnection }}
            - task: AzureClI@2
              displayName: Launch Validate Branch Name
              name: validate_branch_name
              condition: or(eq(parameters.pullRequestTargetBranch, 'main'), eq(variables['HasSemverTag'], 'true'))
              inputs:
                scriptType: bash
                scriptLocation: inlineScript
                workingDirectory: $(Pipeline.Workspace)/$(Build.Repository.Name)
                inlineScript: |
                  export PATH=/home/launch/env/bin:$PATH
                  echo "BUILD_SOURCE_BRANCH: ${BUILD_SOURCE_BRANCH}"
                  echo "PULL_REQUEST_SOURCE_BRANCH: ${PULL_REQUEST_SOURCE_BRANCH}"
                  SOURCE_BRANCH=${PULL_REQUEST_SOURCE_BRANCH:-${BRANCH_NAME}}
                  echo "SOURCE_BRANCH: ${SOURCE_BRANCH}"
                  # If we get a non-main branch, we need to validate the name using launch-cli.
                  [ $SOURCE_BRANCH == 'main' ] || launch validate branch-name --branch-name "${SOURCE_BRANCH}"
                azureSubscription: ${{ parameters.serviceConnection }}
                addSpnToEnvironment: true
              env:
                BUILD_SOURCE_BRANCH: ${{ parameters.buildSourceBranch }}
                PULL_REQUEST_SOURCE_BRANCH: ${{ parameters.pullRequestSourceBranch }}
            # - task: AzureClI@2
            #   name: Debug
            #   displayName: Debug
            #   inputs:
            #     scriptType: bash
            #     scriptLocation: inlineScript
            #     workingDirectory: $(System.DefaultWorkingDirectory)
            #     inlineScript: |
            #       export PATH=/home/launch/env/bin:$PATH
            #       echo PULL_REQUEST_TARGET_BRANCH=$PULL_REQUEST_TARGET_BRANCH
            #       echo HAS_SEMVER_TAG=$HAS_SEMVER_TAG
            #       echo "---"
            #       env | sort
            #     azureSubscription: ${{ parameters.serviceConnection }}
            #     addSpnToEnvironment: true
            #   env:
            #     PULL_REQUEST_TARGET_BRANCH: ${{ parameters.pullRequestTargetBranch }}
            #     HAS_SEMVER_TAG: $(HasSemverTag)
            # - ${{ if eq(parameters.pullRequestTargetBranch, 'main') }}:
            #   - task: AzureClI@2
            #     name: MainCheck
            #     displayName: MainCheck
            #     inputs:
            #       scriptType: bash
            #       scriptLocation: inlineScript
            #       workingDirectory: $(System.DefaultWorkingDirectory)
            #       inlineScript: |
            #         export PATH=/home/launch/env/bin:$PATH
            #         echo "eq(parameters.pullRequestTargetBranch, 'main')"
            #         echo OUTCOME=$OUTCOME
            #       azureSubscription: ${{ parameters.serviceConnection }}
            #       addSpnToEnvironment: true
            #     env:
            #       OUTCOME: ${{ parameters.pullRequestTargetBranch }}
            # - ${{ else }}:
            #   - task: AzureClI@2
            #     name: MainCheckFailed
            #     displayName: MainCheckFailed
            #     inputs:
            #       scriptType: bash
            #       scriptLocation: inlineScript
            #       workingDirectory: $(System.DefaultWorkingDirectory)
            #       inlineScript: |
            #         export PATH=/home/launch/env/bin:$PATH
            #         echo "eq(parameters.pullRequestTargetBranch, 'main') FAILED"
            #         echo OUTCOME=$OUTCOME
            #       azureSubscription: ${{ parameters.serviceConnection }}
            #       addSpnToEnvironment: true
            #     env:
            #       OUTCOME: ${{ parameters.pullRequestTargetBranch }}
            # - ${{ if eq(variables['HasSemverTag'], 'true') }}:
            #   - task: AzureClI@2
            #     name: SemverCheck
            #     displayName: SemverCheck
            #     inputs:
            #       scriptType: bash
            #       scriptLocation: inlineScript
            #       workingDirectory: $(System.DefaultWorkingDirectory)
            #       inlineScript: |
            #         export PATH=/home/launch/env/bin:$PATH
            #         echo "eq(variables['HasSemverTag'], 'true')"
            #         echo OUTCOME=$OUTCOME
            #       azureSubscription: ${{ parameters.serviceConnection }}
            #       addSpnToEnvironment: true
            #     env:
            #       OUTCOME: $(HasSemverTag)
            # - ${{ else }}:
            #   - task: AzureClI@2
            #     name: SemverCheckFailed
            #     displayName: SemverCheckFailed
            #     inputs:
            #       scriptType: bash
            #       scriptLocation: inlineScript
            #       workingDirectory: $(System.DefaultWorkingDirectory)
            #       inlineScript: |
            #         export PATH=/home/launch/env/bin:$PATH
            #         echo "eq(variables['HasSemverTag'], 'true') FAILED"
            #         echo OUTCOME=$OUTCOME
            #       azureSubscription: ${{ parameters.serviceConnection }}
            #       addSpnToEnvironment: true
            #     env:
            #       OUTCOME: $(HasSemverTag)

