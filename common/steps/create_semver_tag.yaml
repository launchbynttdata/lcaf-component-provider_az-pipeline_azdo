# This template will create a semantic version tag utilizing the source branch
# name obtained from the last-merged PR. This step utilizes the repository's
# history to determine the last-merged PR's identifier, then queries the Azure
# DevOps REST API to work out the branch name that was utilized in that pull
# request.

# Determining the last PR identifier:
#
# $(git log -n 1 --pretty=format:%B | sed -ne 's/.*PR \([0-9]*\).*/\1/p' | head -n 1)
#             ^                  ^                        ^                   ^
#             |                  |                        |                   |
#             |         Outputs only the            Extracts only the       Grabs only the
#             |         commit message              numeric part of         first PR ID
#             |                                     the PR's identifier
#           Limits to the last commit

# Querying the Azure DevOps API:
#
# $(curl -H "$AUTHORIZATION_HEADER" -s ${{ parameters.adoUrl }}/_apis/git/pullrequests/$ORIGINATING_PULL_REQUEST_ID\?api-version\=7.0 | jq -r .sourceRefName | sed -e 's,refs/heads/,,g')
#                ^                                ^                                             ^                                                 ^                         ^
#                |                                |                                             |                                                 |                         |
#           Utilizes AzDO Token           Defaulted, but can                              PR Identifier from                            Extract the branch name         Strip 'refs/heads/'
#           from checkout phase           change if needed                                commit history                                that was used as the source     from the branch name
#                                                                                                                                       of the pull request

# The retrieved branch name is plugged into the `launch-cli` command which will
# determine the next version based on the branch name provided, and then push a
# tag to the repository. `launch-cli` supports incrementing a semantic version
# using the following prefixes:
#
# Increments the PATCH version:
# - fix/*
# - patch/*
# - bug/*
#
# Increments the MINOR version:
# - feature/*
#
# Increments the MAJOR version:
# - fix!/*
# - patch!/*
# - bug!/*
# - feature!/*

# The following variable must be present in the current scope for this job:
# - HasSemverTag: A boolean indicating whether this repo has existing semver
#   tags. This variable determines whether or not the step runs.

parameters:
  - name: adoUrl
    type: string
    default: https://fdc-devops.dc.state.fl.us/DefaultCollection/TRP
  - name: serviceConnection
    type: string

steps:
  - task: AzureClI@2
    displayName: Create Semantic Version Tag
    condition: "eq(variables['HasSemverTag'], 'true')"
    inputs:
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        export PATH=/home/launch/env/bin:$PATH
        # The pull request associated with this run is obtained from the
        # commit message when the change was merged. This is the only reasonable
        # way I can find to accomplish this in Azure DevOps, which doesn't allow
        # triggering pipelines on a PR merge event like other SCM systems do.
        ORIGINATING_PULL_REQUEST_ID=$(git log -n 1 --pretty=format:%B | sed -ne 's/.*PR \([0-9]*\).*/\1/p' | head -n 1)
        echo "ORIGINATING_PULL_REQUEST_ID: ${ORIGINATING_PULL_REQUEST_ID}"
        # If for some reason we can't extract the numeric PR identifier, we'll fail with a particular message.
        [ -n "${ORIGINATING_PULL_REQUEST_ID}" ] || (echo "Could not determine the originating pull request for this pipeline run! Check the latest commit message and ensure that the PR Merge verbiage added by Azure DevOps is present going forward."; exit 1)
        AUTHORIZATION_HEADER="Authorization: Bearer $SYSTEM_ACCESSTOKEN"
        SOURCE_BRANCH_NAME=$(curl -H "$AUTHORIZATION_HEADER" -s ${{ parameters.adoUrl }}/_apis/git/pullrequests/$ORIGINATING_PULL_REQUEST_ID\?api-version\=7.0 | jq -r .sourceRefName | sed -e 's,refs/heads/,,g')
        echo "SOURCE_BRANCH_NAME: ${SOURCE_BRANCH_NAME}"
        launch github version apply --pipeline --source-branch $SOURCE_BRANCH_NAME
      azureSubscription: ${{ parameters.serviceConnection }}
      addSpnToEnvironment: true
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)