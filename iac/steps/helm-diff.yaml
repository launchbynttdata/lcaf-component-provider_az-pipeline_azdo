parameters:
  - name: enabled
    type: boolean
    default: true
  - name: serviceConnection
    type: string
    default: false
  - name: namespace
    type: string
    default: false
  - name: releaseName
    type: string
    default: false
  - name: acrName
    type: string
    default: false
  - name: imageName
    type: string
    default: false
  - name: imageTag
    type: string
    default: "None"
  - name: deployEnv
    type: string
    default: false
  - name: helmChart
    type: string
    default: false
  - name: helmChartVersion
    type: string
    default: false
  - name: additionalSteps
    type: stepList
    default: []

steps:
  - ${{ each step in parameters.additionalSteps }}:
    - ${{ step }}
  - task: AzureCLI@2
    enabled: ${{ parameters.enabled }}
    displayName: Helm Diff
    env:
      KUBECONFIG: "$(Pipeline.Workspace)/kubeconfig"
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -x

        if [[ "${{ parameters.imageTag }}" == "None" ]]; then
          imageTag=$(Build.BuildId)
        else
          imageTag=${{ parameters.imageTag }}
        fi
        imageRepository="${{ parameters.acrName }}/${{ parameters.imageName }}"

        # Check if namespace exists
        if kubectl get namespace ${{ parameters.namespace }} >/dev/null 2>&1; then
          echo "Namespace $namespace already exists"
        else
          echo "Creating namespace ${{ parameters.namespace }}"
          kubectl create namespace ${{ parameters.namespace }}
        fi

        # Get the env vars and secrets
        envFolder=$(basename $(Build.Repository.Uri))/envs/${{ parameters.deployEnv }}
        ls ${envFolder}
        envVarsFile=${envFolder}/application/env_vars.yaml
        secretsValuesFile=${envFolder}/application/secrets.yaml
        helmValuesFile=${envFolder}/helm/values.yaml
        
        helm diff upgrade --install ${{ parameters.releaseName }} oci://${{ parameters.acrName }}/helm/${{ parameters.helmChart }} \
          --version ${{ parameters.helmChartVersion }} -n ${{ parameters.namespace }} --set image.tag=$imageTag \
          --set image.repository="${imageRepository}" -f ${helmValuesFile} -f ${envVarsFile} -f ${secretsValuesFile} --allow-unreleased
